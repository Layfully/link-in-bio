@using Storyblok
@using Storyblok.Client
@using Client.Components
@using Client.Data.Components
@using Client.Data.Extensions

@inject IJSRuntime Js
@inject StoryblokStoryClient StoryblokClient
@page "/"

<PageTitle>Adrian Gaborek - Links</PageTitle>
<main class="flex flex-col items-center justify-center bg-gray-900 min-h-screen">
    <Header Model="@_header" />
    <LinkList Model="@_linkList" />
</main>
<div id="particles-js" class="absolute top-0 left-0 w-full h-full z-10"></div>

<script>
    window.replaceData = () => {
        var replacers = document.querySelectorAll('[data-replace]');

        for (var i = 0; i < replacers.length; i++) {
            let replaceClasses = JSON.parse(replacers[i].dataset.replace.replace(/'/g, '"'));
            Object.keys(replaceClasses).forEach(function (key) {
                replacers[i].classList.remove(key);
                replacers[i].classList.add(replaceClasses[key]);
            });
        }
    }

    window.setupParticles = () => {
        particlesJS('particles-js', {
            particles: {
                number: { value: 40, density: { enable: true, value_area: 800 } },
                color: { value: '#ffffff' },
                shape: { type: 'circle', stroke: { width: 0, color: '#4B5563' } },
                opacity: { value: 0.2, random: false, anim: { enable: false, speed: 1, opacity_min: 0.1, sync: false } },
                size: { value: 2, random: true, anim: { enable: false, speed: 20, size_min: 0.1, sync: false } },
                line_linked: { enable: true, distance: 150, color: '#ffffff', opacity: 0.2, width: 1 },
                move: { enable: true, speed: 4, direction: 'none', random: false, straight: false, out_mode: 'out', bounce: false, attract: { enable: false, rotateX: 600, rotateY: 1200 } }
            },
            interactivity: {
                detect_on: 'canvas',
                events: { onhover: { enable: true, mode: 'repulse' }, onclick: { enable: true, mode: 'push' }, resize: true },
                modes: { grab: { distance: 200, line_linked: { opacity: 0.2 } }, bubble: { distance: 400, size: 40, duration: 2, opacity: 8, speed: 3 }, repulse: { distance: 100, duration: 0.4 }, push: { particles_nb: 4 }, remove: { particles_nb: 2 } }
            },
            retina_detect: true
        });
    }
</script>

@code {
    private StoryblokHeader? _header;
    private List<StoryblokLink>? _linkList;

    protected override async Task OnInitializedAsync()
    {
        var story = await StoryblokClient.Story().WithSlug("/home").ResolveLinks(ResolveLinksType.None).Load<StoryblokPage>();

        if (story?.Content?.Body is not null)
        {
            _header = story.Content.Body[0] as StoryblokHeader;
            _linkList = story.Content.Body[1].ToList<StoryblokLink>();
        }

        await Js.InvokeVoidAsync("replaceData");
        await Js.InvokeVoidAsync("setupParticles");

        await base.OnInitializedAsync();
    }
}