<ul class="flex flex-col w-full gap-y-10 z-20 translate-y-12 opacity-0 transition-all translate-y-12 ease-out duration-1000" data-replace="{ 'translate-y-12': 'translate-y-0', 'opacity-0': 'opacity-100' }">
    @foreach (var button in buttons)
    {
        <li class="w-full flex justify-center">
            @if (string.IsNullOrEmpty(button.Link))
            {
                <a href="@button.Link" class="group text-center w-4/5 sm:w-1/2 md:w-1/3 box-border text-neutral-600 font-bold ring-1 ring-purple-600 rounded-lg py-2 relative">
                    <i class="@button.IconClass mr-2"></i> @button.Text
                </a>
            }
            else
            {
                <a href="@button.Link" class="group text-center w-4/5 sm:w-1/2 md:w-1/3 transition-all ease-in-out duration-200 box-border text-white font-bold ring-1 ring-purple-600 rounded-lg py-2 hover:ring-2 hover:ring-white relative hover:scale-110">
                    <i class="group-hover:scale-125 transition-transform ease-in-out duration-200 @button.IconClass mr-2"></i> @button.Text
                </a>
            }
        </li>
    }
</ul>
@code {
    private List<ButtonInfo> buttons = new List<ButtonInfo>
    {
        new ButtonInfo("GitHub", "fab fa-github", "https://github.com/Layfully"),
        new ButtonInfo("Facebook", "fab fa-facebook", "https://www.facebook.com/adrian.gaborek"),
        new ButtonInfo("LinkedIn", "fab fa-linkedin", "https://www.linkedin.com/in/adrian-gaborek/"),
        new ButtonInfo("Portfolio", "fas fa-briefcase", null )
    };

    private class ButtonInfo
    {
        public string Text { get; set; }
        public string IconClass { get; set; }
        public string? Link { get; set; }

        public ButtonInfo(string text, string iconClass, string? link)
        {
            Text = text;
            IconClass = iconClass;
            Link = link;
        }
    }
}
